import {SimpleTypes} from 'json-schema-spec-types';
import {allJsonSet, createJsonSetFromConfig, emptyJsonSet} from '../set/json-set';
import {Set} from '../set/set';
import {ParsedPropertiesKeyword} from '../set/subset/object-subset/object-subset-config';
import {createArraySet} from './create-array-set';
import {createNumberSet} from './create-number-set';
import {createObjectSet} from './create-object-set';
import {createStringSet} from './create-string-set';
import {createTypeSet} from './create-type-set';

export interface ParsedSchemaKeywords {
    additionalProperties: Set<'json'>;
    exclusiveMaximum: number;
    exclusiveMinimum: number;
    items: Set<'json'>;
    maximum: number;
    minimum: number;
    maxItems: number;
    maxLength: number;
    maxProperties: number;
    minItems: number;
    minLength: number;
    minProperties: number;
    properties: ParsedPropertiesKeyword;
    required: string[];
    type: SimpleTypes[];
}

export const createJsonSetFromParsedSchemaKeywords = (parsedSchemaKeywords: ParsedSchemaKeywords): Set<'json'> =>
    createJsonSetFromConfig({
        array: createArraySet(parsedSchemaKeywords),
        boolean: createTypeSet('boolean', parsedSchemaKeywords.type),
        null: createTypeSet('null', parsedSchemaKeywords.type),
        number: createNumberSet(parsedSchemaKeywords),
        object: createObjectSet(parsedSchemaKeywords),
        string: createStringSet(parsedSchemaKeywords)
    });

export const createAllJsonSet = (): Set<'json'> => allJsonSet;

export const createEmptyJsonSet = (): Set<'json'> => emptyJsonSet;
