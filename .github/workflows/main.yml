name: CI

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 0'

jobs:
  yarn_install:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Detect Yarn cache dir
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Restore Yarn packages
        id: yarn-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Restore node modules only if the SHA is perfect; to avoid possibility of corruption.
      - name: Restore node_modules
        id: node_modules-restore
        uses: actions/cache/restore@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Yarn install
        if: steps.node_modules-restore.outputs.cache-hit != 'true'
        run: yarn install

      - name: Save Yarn packages
        if: steps.node_modules-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

      - name: Save node_modules
        if: steps.node_modules-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}

  test_components:
    runs-on: ubuntu-latest

    needs: [yarn_install]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # The storybook runner is going to do some Git operations that rely on access to the main branch.
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Detect Yarn cache dir
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Restore Yarn packages
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Build
        run: |
          yarn
          yarn workspaces foreach -v -t --exclude root --exclude @appland/appmap --exclude @appland/scanner run build

      - name: Test
        run: |
          cd packages/components
          yarn run lint
          yarn run test

  test_cli:
    runs-on: ubuntu-latest

    needs: [yarn_install]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Detect Yarn cache dir
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Restore Yarn packages
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Build
        run: |
          yarn
          yarn run build

      - name: Test
        run: |
          cd packages/cli
          yarn run lint
          yarn run test
          npx appmap-node yarn run test
