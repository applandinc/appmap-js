{{#*inline "finding-stack" }}
{{#with stack }}
  {{#each this }}
- {{ this }}
  {{/each}}
{{/with}}

{{/inline}}
{{#*inline "finding"}}

<details>
<summary>
  {{ ruleTitle }} ({{impactDomain}})
</summary>

##### Description

> {{ message }}

| Field | Value |
| --- | --- |
| Rule | [{{ ruleId }}](https://appmap.io/docs/analysis/rules-reference.html#{{ruleId }}) |
| Impact domain | {{ impactDomain }} |

{{#if stack}}
##### Stack trace

{{> finding-stack}}
{{/if}}

</details>
{{/inline}}
##  Welcome to AppMap!

This is a report of the AppMap data in your project. Let's start with a look at how the
AppMap data is created in this project. In CI, AppMaps are generally created by recording
test cases. Here's how the AppMaps in this project were created:

{{#if (eq (length appmapCountByRecorderName) 1) }}
| Number of AppMaps | Type of recording |
| --- | --- |
{{#each appmapCountByRecorderName}}
| {{@this}} | {{@key}} |
{{/each}}
{{else}}
```mermaid
pie showData
  title Sources of AppMap data in this project
{{#each appmapCountByRecorderName}}
  "{{@key}}" : {{@this}}
{{/each}}
```
{{/if}}

Continue reading for information about:

- [Code profile](#code-profile)
- [Web service API profile](#ws-api-profile)
- [SQL profile](#sql-profile)
- [Runtime analysis](#runtime-analysis)

<h3><a id="code-profile">Code profile</a></h3>

Your _appmap.yml_ configuration file specifies all the code that you want AppMap to instrument and record.
By default, sub-modules of any requested code are recorded as well. In this project, the packages specified
in _appmap.yml_ are:

```yaml
{{{ format_as_yaml appmapConfig.packages }}}```

By applying this configuration to your {{ appmapConfig.language }} project, AppMap has recorded the 
following packages and modules:

{{#each (packages_matching_configuration packages appmapConfig.packages) }}`{{ @this }}` {{/each}}

<h3><a id="ws-api-profile">Web service API profile</a></h3>

When you record AppMaps that include HTTP server requests, AppMap automatically generates OpenAPI definitions
based on the observed data.

{{#if (length appmapCountByHTTPServerRequestCount) }}

**{{ format_as_percentage 
  (divide
    (subtract 
      (sum (values appmapCountByRecorderName))
      (coalesce appmapCountByHTTPServerRequestCount.[0] 0)
    )
    (sum (values appmapCountByRecorderName))
  ) 
  }}** of the AppMaps in this project contain **at least one** HTTP server request.


**{{ format_as_percentage 
  (divide
    (subtract 
      (sum (values appmapCountByRecorderName))
      (coalesce appmapCountByHTTPServerRequestCount.[0] 0)
      (coalesce appmapCountByHTTPServerRequestCount.[1] 0)
    )
    (sum (values appmapCountByRecorderName))
  ) 
  }}** of the AppMaps in this project contain **more than one** HTTP server request.

Here's **a summary of the web service routes** that are provided by this project:

{{#each routeCountByResource}}`{{@key}}` {{/each}}

And here are the different content types served by the API:

| Response Content Type | Number of Routes |
| --- | --- |
  {{#each routeCountByContentType}}
| {{@key}} | {{@this}} |
  {{/each}}

As you change your code and tests, AppMap will automatically update the OpenAPI definitions. 
You'll see a summary of the REST API changes in each pull request.

{{~else~}}
This project doesn't have any AppMaps that contain HTTP server requests. If your app provides
web service APIs, and you don't see any HTTP server requests here, you can add some test cases that 
exercise the HTTP server. The more of these type of tests you add,
the better the AppMap data will be for generating OpenAPI definitions and comparing the API
changes in each pull request.
{{/if}}

<h3><a id="sql-profile">SQL profile</a></h3>

When your code makes a SQL query, AppMap records the SQL query in detail. It even parses the queries
to figure out which tables your app is using, and how it's using them.

{{#if (length appmapCountBySQLQueryCount) }}


**{{ format_as_percentage 
  (divide
    (subtract 
      (sum (values appmapCountByRecorderName))
      (coalesce appmapCountBySQLQueryCount.[0] 0)
    )
    (sum (values appmapCountByRecorderName))
  ) 
  }}** of the AppMaps in this project contain **at least one** SQL query.


**{{ format_as_percentage 
  (divide
    (subtract 
      (sum (values appmapCountByRecorderName))
      (coalesce appmapCountBySQLQueryCount.[0] 0)
      (coalesce appmapCountBySQLQueryCount.[1] 0)
    )
    (sum (values appmapCountByRecorderName))
  ) 
  }}** of the AppMaps in this project contain **more than one** SQL query.

{{#if (length sqlTables) }}

Here's are all the SQL tables that are present in the observed queries:

{{#each sqlTables}}`{{@this}}` {{/each}}
{{/if}}

{{~else~}}
This project doesn't have any AppMaps of SQL queries. If your app uses a database,
and you don't see SQL queries here, you can add some test cases that interact with the database. The more of these type of tests you add,
the better the AppMap data will be for analyzing the SQL changes in each pull request.
{{/if}}

<h3><a id="runtime-analysis">Runtime analysis</a></h3>

AppMap includes a runtime analysis capability that analyzes the AppMap data for security vulnerabilities,
performance problems, and code anti-patterns. On each pull request, you'll get a report of
the new and resolved issues for the repo.

{{#if (length findingCountByImpactDomain) }}
AppMap has performed a preliminary analysis of this repo, and detected some problems. Here's a
summary:

```mermaid
pie showData
  title Security flaws, performance problems and code anti-patterns
{{#each findingCountByImpactDomain}}
  "{{@key}}" : {{@this}}
{{/each}}
```

Here's a sample of the security flaws, performance problems, and code anti-patterns that were
detected in this project:

{{#each findings}}
{{> finding}}
{{/each}}

A GitHub Artifact called `appmap-archive-full_[sha].tar` is attached to this GitHub Action workflow
run. A full accounting of the problems detected in this repo can be found in that archive file.

{{~else~}}
No security vulnerabilities or performance problems were detected in this repo. Keep up the good work :slightly_smiling_face:
{{/if}}
