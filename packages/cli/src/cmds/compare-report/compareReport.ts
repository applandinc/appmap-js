import { readFile, writeFile } from 'fs/promises';
import yargs from 'yargs';
import { handleWorkingDirectory } from '../../lib/handleWorkingDirectory';
import { verbose } from '../../utils';
import { ChangeReport } from '../compare/ChangeReport';
import MarkdownReport, { SECTIONS, EXPERIMENTAL_SECTIONS } from './MarkdownReport';
import { log } from 'console';

export const command = 'compare-report <report-directory>';
export const describe =
  'Generate a report document from comparison data generated by the compare command.';

export const builder = (args: yargs.Argv) => {
  args.positional('report-directory', {
    describe: 'directory containing the comparison data',
    type: 'string',
    demandOption: true,
  });

  args.option('source-url', {
    describe: `Base URL to link to a source file. The relative path to the source file will be added to the URL path.`,
    type: 'string',
  });

  args.option('appmap-url', {
    describe: `Base URL to link to AppMaps. A 'path' parameter will be added with the relative path from the report directory to the AppMap JSON file.`,
    type: 'string',
  });

  args.option('directory', {
    describe: 'program working directory',
    type: 'string',
    alias: 'd',
  });

  args.option('include-section', {
    describe:
      'Non-default sections to include in the report. This repeatable option may be used to include beta, early access and/or experimental sections in the report. ' +
      `The experimental sections are: ${EXPERIMENTAL_SECTIONS.join(', ')}`,
    type: 'string',
  });

  args.option('exclude-section', {
    describe: `Default sections to exclude in the report. The default sections are: ${SECTIONS.join(
      ' ,'
    )}`,
    type: 'string',
  });

  return args.strict();
};

export const handler = async (argv: any) => {
  verbose(argv.verbose);
  const { directory, includeSection: includeSections, excludeSection: excludeSections } = argv;
  handleWorkingDirectory(directory);

  const { reportDirectory, sourceUrl, appmapUrl } = argv;
  process.chdir(reportDirectory);

  const makeArray = (arg: string): string[] => {
    if (Array.isArray(arg)) return arg;

    return [arg];
  };

  const report = JSON.parse(await readFile('change-report.json', 'utf-8')) as ChangeReport;
  const mdReport = new MarkdownReport(appmapUrl, sourceUrl);
  if (includeSections) mdReport.includeSections = makeArray(includeSections);
  if (excludeSections) mdReport.excludeSections = makeArray(excludeSections);

  const reportMD = await mdReport.generateReport(report);
  await writeFile('report.md', reportMD);
};
