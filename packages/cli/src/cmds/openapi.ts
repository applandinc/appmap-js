import { join } from 'path';

import { promises as fsp, statSync } from 'fs';
import { queue } from 'async';
import { glob } from 'glob';
import yaml from 'js-yaml';
import {
  Model,
  parseHTTPServerRequests,
  rpcRequestForEvent,
  SecuritySchemes,
  verbose,
} from '@appland/openapi';
import { Event } from '@appland/models';
import { Arguments, Argv } from 'yargs';
import { handleWorkingDirectory } from '../lib/handleWorkingDirectory';
import { locateAppMapDir } from '../lib/locateAppMapDir';

export class OpenAPICommand {
  directory: string;
  count: number;
  model: Model;
  securitySchemes: SecuritySchemes;

  constructor(directory: string) {
    this.directory = directory;
    this.model = new Model();
    this.securitySchemes = new SecuritySchemes();
    this.count = 0;
  }

  async execute(): Promise<any> {
    const q = queue(this.collectAppMap.bind(this), 5);
    q.pause();
    // Make sure the directory exists -- if it doesn't, the glob below just returns nothing.
    statSync(this.directory);
    const files = glob.sync(`${this.directory}/**/*.appmap.json`);
    files.forEach((f) => q.push(f));
    await new Promise<void>((resolve, reject) => {
      q.drain(resolve);
      q.error(reject);
      q.resume();
    });

    return {
      paths: this.model.openapi(),
      securitySchemes: this.securitySchemes.openapi(),
    };
  }

  async collectAppMap(file: string): Promise<void> {
    this.count += 1;
    try {
      parseHTTPServerRequests(
        JSON.parse((await fsp.readFile(file)).toString()),
        (e: Event) => {
          const request = rpcRequestForEvent(e)!;
          this.model.addRpcRequest(request);
          this.securitySchemes.addRpcRequest(request);
        }
      );
    } catch (e) {
      throw new Error(`Error parsing ${file}: ${e}`);
    }
  }
}

async function loadTemplate(fileName: string): Promise<any> {
  if (!fileName) {
    // eslint-disable-next-line no-param-reassign
    fileName = join(__dirname, '../../resources/openapi-template.yaml');
  }
  return yaml.load((await fsp.readFile(fileName)).toString());
}

module.exports = {
  command: 'openapi',
  aliases: ['swagger'],
  describe: 'Generate OpenAPI from AppMaps in a directory',
  builder(args: Argv) {
    args.option('directory', {
      describe: 'program working directory',
      type: 'string',
      alias: 'd',
    });
    args.option('appmap-dir', {
      describe: 'directory to recursively inspect for AppMaps',
      default: 'tmp/appmap',
      requiresArg: true,
    });
    args.option('output-file', {
      alias: ['o'],
      describe: 'output file name',
      requiresArg: true,
    });
    args.option('openapi-template', {
      describe:
        'template YAML; generated content will be placed in the paths and components sections',
    });
    args.option('openapi-title', {
      describe: 'info/title field of the OpenAPI document',
    });
    args.option('openapi-version', {
      describe: 'info/version field of the OpenAPI document',
    });
    return args.strict();
  },
  async handler(argv: Arguments | any) {
    verbose(argv.verbose);
    handleWorkingDirectory(argv.directory);
    const appmapDir = await locateAppMapDir(argv.appmapDir);

    const { openapiTitle, openapiVersion } = argv;

    function tryConfigure(path: string, fn: () => void) {
      try {
        fn();
      } catch {
        console.warn(`Warning: unable to configure OpenAPI field ${path}`);
      }
    }

    const openapi = await new OpenAPICommand(appmapDir).execute();

    const template = await loadTemplate(argv.openapiTemplate);
    template.paths = openapi.paths;
    template.components = openapi.components;
    if (openapiTitle) {
      tryConfigure('info.title', () => {
        template.info.title = openapiTitle;
      });
    }
    if (openapiVersion) {
      tryConfigure('info.version', () => {
        template.info.version = openapiVersion;
      });
    }

    const fileContents = `# Generated by: @appland/appmap openapi
#
# Customize the title with: --openapi-title
# Customize the version with: --openapi-version
# Customize this entire template with: --openapi-template
#
# 'paths' and 'components' will be populated automatically.
${yaml.dump(template)}
`;
    if (argv.outputFile) {
      await fsp.writeFile(argv.outputFile, fileContents);
    } else {
      console.log(fileContents);
    }
  },
};
