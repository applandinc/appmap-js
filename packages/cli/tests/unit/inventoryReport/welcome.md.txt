##  AppMap configuration report

Success! Your project has been successfully configured to record AppMaps when
you run your tests.

> **[Continue with AppMap Setup >>](https://getappmap.com/github/configuration_report)**

<hr/>

The following sections contain detailed information about the AppMap integration with your project.

<details>
<summary>
<h3><a id="data-sources">AppMap data sources</a></h3>
</summary>

In GitHub Actions and other CI systems, AppMaps are created by recording
test cases. Here's how the AppMaps in this project were created:

| Number of AppMaps | Type of recording |
| --- | --- |
| 6 | minitest |

</details>

<details>
<summary>
<<<<<<< HEAD
<h3><a id="code-profile">Code profile</a></h3>
=======
<h3><a id="code-profile">Code recording settings</a></h3>
>>>>>>> 163cf624e (feat: Report large appmaps and frequent functions)
</summary>

Your _appmap.yml_ configuration file specifies all the code that you want AppMap to instrument and record.
By default, sub-modules of any requested code are recorded as well. In this project, the packages specified
in _appmap.yml_ are:

```yaml
- path: app
```

By applying this configuration to your ruby project, AppMap has recorded the 
following packages and modules:

`app` `app/helpers` 

</details>

<details>
<summary>
<h3><a id="ws-api-profile">Web service API profile</a></h3>
</summary>

When you record AppMaps that include HTTP server requests, AppMap automatically generates OpenAPI definitions
based on the observed data.


**100%** of the AppMaps in this project contain **at least one** HTTP server request.


**83%** of the AppMaps in this project contain **more than one** HTTP server request.

Here's **a summary of the web service routes** that are provided by this project:

`/` `/about` `/account_activations/{id}` `/contact` `/help` `/login` `/logout` `/microposts` `/microposts/{id}` `/password_resets` `/password_resets/new` `/password_resets/{id}` `/relationships` `/relationships/{id}` `/signup` `/users` `/users/{id}` 

And here are the different content types served by the API:

| Response Content Type | Number of Routes |
| --- | --- |
| text/html | 38 |
| text/javascript | 2 |

As you change your code and tests, AppMap will automatically update the OpenAPI definitions. 
You'll see a summary of the REST API changes in each pull request.
</details>

<details>
<summary>
<h3><a id="sql-profile">SQL profile</a></h3>
</summary>

When your code makes a SQL query, AppMap records the SQL query in detail. It even parses the queries
to figure out which tables your app is using, and how it's using them.



**83%** of the AppMaps in this project contain **at least one** SQL query.


**83%** of the AppMaps in this project contain **more than one** SQL query.


Here are the SQL tables that are present in the observed queries:

`active_storage_attachments` `active_storage_blobs` `microposts` `relationships` `sqlite_master` `sqlite_temp_master` `users` 

</details>

<details>
<summary>
<h3><a id="large-appmaps">Large AppMaps</a></h3>
</summary>

Some tests can produce large AppMaps, because those they exercise longer or highly repeated code paths. 
AppMap runtime code review is optimized for AppMaps that 
are less than 10 MB in size. You may want to consider disabling AppMap for tests that produce really
large AppMaps, since they can slow down your CI job and they are hard to analyze. Also, note that
AppMaps greater than 50 MB in size will not be analyzed at all.

You can disable recording of a test case by adding a code comment or annotation to the test case file.
Learn how by visiting the 
[reference documentation for `appmap-ruby`](https://appmap.io/docs/reference/appmap-ruby.html).

Here are the largest AppMaps that are greater than 1 MB:

| Size | Location | Test name | AppMap path |
| --- | --- | --- | --- |
| 1.94 MB | test/integration/microposts_interface_test.rb:9 | Microposts_interface micropost interface | minitest/Microposts_interface_micropost_interface.appmap.json |

</details>

<details>
<summary>
<h3><a id="frequent-functions">Frequently recorded functions</a></h3>
</summary>

The AppMap configuration file _appmap.yml_ specifies which functions to record. 
Some functions may be called very frequently, adding little to the understandability of the code
while adding a lot of overhead to the AppMap recording process. 

Note that some functions are automatically added to the recording by
the AppMap agent. For example, the AppMap agent automatically functions that are
relevant to detecting security flaws and performance problems. If you disable recording of these
functions, then some problems may become undetectable.

You can disable recording of a class or functions by updating the _appmap.yml_ configuration file.
Learn how by visiting the 
[reference documentation for `appmap-ruby`](https://appmap.io/docs/reference/appmap-ruby.html).

Here are some of the most frequently recorded functions in this project:

<<<<<<< HEAD
| Number of occurrances | Function name | Source location |
=======
| Number of occurrences | Function name | Source location |
>>>>>>> 163cf624e (feat: Report large appmaps and frequent functions)
| --- | --- | --- |
| 3410 | Array#pack | &lt;internal:pack&gt;:133 |
| 1387 | SessionsHelper#current_user | app/helpers/sessions_helper.rb:16 |
| 1200 | Logger::LogDevice#write | /Users/kgilpin/.rbenv/versions/3.0.2/lib/ruby/3.0.0/logger/log_device.rb:31 |

</details>

### Learn more

To learn more about AppMap, visit
[appmap.io/docs](https://appmap.io/docs).
