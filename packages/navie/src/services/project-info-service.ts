import { dump } from 'js-yaml';
import assert from 'assert';

import {
  AppMapConfig,
  AppMapStats,
  CodeEditorInfo,
  ProjectInfo,
  ProjectInfoProvider,
} from '../project-info';
import InteractionHistory, {
  ContextItemEvent,
  ContextItemRequestor,
  PromptInteractionEvent,
} from '../interaction-history';
import { PromptType, buildPromptDescriptor } from '../prompt';

type Test = () => boolean;

type MinimumStats = Omit<AppMapStats, 'routes' | 'tables' | 'packages'> & {
  routes?: string[];
  tables?: string[];
  packages?: string[];
};

export default class ProjectInfoService {
  constructor(
    public interactionHistory: InteractionHistory,
    public projectInfoProvider: ProjectInfoProvider
  ) {}

  async lookupProjectInfo(): Promise<ProjectInfo[]> {
    const response = await this.projectInfoProvider({ type: 'projectInfo' });
    if (!response) {
      this.interactionHistory.log('No project info found');
      return [];
    }

    const projectInfo = Array.isArray(response) ? response : [response];
    this.interactionHistory.log('Project info obtained');
    return projectInfo;
  }

  promptProjectInfo(isArchitecture: boolean, projectInfo: ProjectInfo[]) {
    const isLargeProject = (appmapStats: AppMapStats) =>
      appmapStats.packages.length > 20 ||
      appmapStats.routes.length > 20 ||
      appmapStats.tables.length > 20;

    const pruneStats = (stats: AppMapStats): MinimumStats => {
      if (isArchitecture || !isLargeProject(stats)) return stats;

      return {
        numAppMaps: stats.numAppMaps,
      };
    };

    const appmapConfigs = projectInfo
      .map((info) => info.appmapConfig)
      .filter(Boolean) as AppMapConfig[];
    const appmapStats = projectInfo
      .map((info) => info.appmapStats)
      .filter(Boolean)
      .map((stats) => (assert(stats), pruneStats(stats)));
    const codeEditors = projectInfo
      .map((info) => info.codeEditor)
      .filter(Boolean) as CodeEditorInfo[];

    this.interactionHistory.addEvent(
      new PromptInteractionEvent(
        PromptType.AppMapConfig,
        'system',
        buildPromptDescriptor(PromptType.AppMapConfig)
      )
    );
    if (appmapConfigs.length > 0) {
      this.interactionHistory.addEvent(
        new ContextItemEvent(
          PromptType.AppMapConfig,
          ContextItemRequestor.ProjectInfo,
          dump(appmapConfigs)
        )
      );
    } else {
      this.interactionHistory.addEvent(
        new ContextItemEvent(
          PromptType.AppMapConfig,
          ContextItemRequestor.ProjectInfo,
          'The project does not contain an AppMap config file (appmap.yml). This file is automatically generated by the AppMap recording agent and does not need to be created by the user.'
        )
      );
    }

    this.interactionHistory.addEvent(
      new PromptInteractionEvent(
        PromptType.AppMapStats,
        'system',
        buildPromptDescriptor(PromptType.AppMapStats)
      )
    );
    if (appmapStats.map((stats) => stats.numAppMaps).reduce((a, b) => a + b, 0) > 0) {
      this.interactionHistory.addEvent(
        new ContextItemEvent(
          PromptType.AppMapStats,
          ContextItemRequestor.ProjectInfo,
          dump(appmapStats)
        )
      );
    } else {
      this.interactionHistory.addEvent(
        new ContextItemEvent(
          PromptType.AppMapStats,
          ContextItemRequestor.ProjectInfo,
          'The project does not contain any AppMaps.'
        )
      );
    }

    this.interactionHistory.addEvent(
      new PromptInteractionEvent(
        PromptType.CodeEditor,
        'system',
        buildPromptDescriptor(PromptType.CodeEditor)
      )
    );
    if (codeEditors.length > 0) {
      this.interactionHistory.addEvent(
        new ContextItemEvent(
          PromptType.CodeEditor,
          ContextItemRequestor.ProjectInfo,
          dump(codeEditors.map(({ name }) => ({ name, installed: true, activated: true })))
        )
      );
    } else {
      this.interactionHistory.addEvent(
        new ContextItemEvent(
          PromptType.CodeEditor,
          ContextItemRequestor.ProjectInfo,
          'The code editor is not specified.'
        )
      );
    }
  }
}
